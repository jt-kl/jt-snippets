# For more information see: https://help.github.com/actions/language-and-framework-guides/using-python-with-github-actions

name: "On-Premise Runner (Pre-Flight & Build)"

on:
  workflow_dispatch:
  push:
    branches: [main]
  pull_request:
    branches: [main]

permissions:
  contents: "read"

env:
  BASE_DATA_DIRECTORY: "/srv/data/"
  BASE_SCRIPT_DIRECTORY: "/srv/scripts/"
  BASE_STAGING_DIRECTORY: "/srv/staging/"
  REPOSITORY_NAME: "jt-snippets"

jobs:
  test:
    runs-on: ["self-hosted", "jthodt"]
    steps:
      - uses: "actions/checkout@v3"
      - name: "Set Up Python v3.10.12"
        uses: "actions/setup-python@v4"
        with:
          python-version: "3.10.12"
      - name: "Pre-Flight Tests"
        id: "pre_flight_tests"
        run: |
          cd $GITHUB_WORKSPACE
          echo -e "Current working directory: $(pwd)"
          echo -e "--------- Directory Contents ---------\n"
          ls -la
          echo -e "\n--------- Directory Contents ---------"

          echo -e "\nInstall package dependencies started...\n"

          if [ ! -d ${{ env.BASE_STAGING_DIRECTORY }}${{ env.REPOSITORY_NAME }} ]
          then
            echo -e -n "\nCreate staging directory started..."
            mkdir -p ${{ env.BASE_STAGING_DIRECTORY }}${{ env.REPOSITORY_NAME }};
            echo -e "${{ vars.GreenText}}COMPLETED${{ vars.ResetText }}"
          else
            echo -e -n "\nPurging old artifacts..."
            rm -rf ${{ env.BASE_STAGING_DIRECTORY }}${{ env.REPOSITORY_NAME }}/*
            echo -e "${{ vars.GreenText}}COMPLETED${{ vars.ResetText }}"

            echo -e -n "\nPurging old virtual environment..."
            rm -rf ${{ env.BASE_STAGING_DIRECTORY }}${{ env.REPOSITORY_NAME }}/.env
            echo -e "${{ vars.GreenText}}COMPLETED${{ vars.ResetText }}"
          fi

          echo -e -n "\nCopying artifacts..."
          cp -r $GITHUB_WORKSPACE/* ${{ env.BASE_STAGING_DIRECTORY }}${{ env.REPOSITORY_NAME }}
          echo -e "${{ vars.GreenText}}COMPLETED${{ vars.ResetText }}"
      - name: "Install Package Dependencies"
        id: "install_packages"
        run: |
          if [[ ${{ steps.pre_flight_tests.outcome }} == "success" ]] 
          then
            cd ${{ env.BASE_STAGING_DIRECTORY }}${{ env.REPOSITORY_NAME }}
            echo -e "Current working directory: $(pwd)"
            
            echo -e "Create Python virtual environment started...\n"
            python3 -m venv .env
            source .env/bin/activate
            python3 -m pip install --upgrade pip
            echo -e "\nCreate Python virtual environment completed."
            
            echo -e "\nInstall package dependencies started...\n"
            if [ -f requirements-dev.txt ]; then pip install -r requirements-dev.txt --no-cache-dir; fi
            if [ -d ./redist ]; then pip install ./redist/*; fi
            pip3 install -e .
            echo -e "\nInstall package dependencies completed."

            exit 0
          else
            exit 1
          fi
      - name: "Invoke Tests"
        id: "test"
        run: |
          if [[ ${{ steps.install_packages.outcome }} == "success" ]] 
          then
            cd ${{ env.BASE_STAGING_DIRECTORY }}${{ env.REPOSITORY_NAME }}
            echo -e "Current working directory: $(pwd)"

            source .env/bin/activate

            pytest -vvv -s --cov-report=term-missing --cov=${{ env.REPOSITORY_NAME }}
            # Manually execute tests locally and generate a coverage badge
            # coverage-badge -o ./tests/coverage.svg

            exit 0
          else
            exit 1
          fi
  preflight:
    needs: "test"
    runs-on: ["self-hosted", "jthodt"]
    steps:
      - uses: "actions/checkout@v3"
      - name: "Set Up Python v3.10.12"
        uses: "actions/setup-python@v4"
        with:
          python-version: "3.10.12"
      - name: "Deploy Artifacts"
        id: "deploy_artifacts"
        run: |
          cd $GITHUB_WORKSPACE
          echo -e "Current working directory: $(pwd)"
          echo -e "--------- Directory Contents ---------\n"
          ls -la
          echo -e "\n--------- Directory Contents ---------"

          if [ ! -d ${{ env.BASE_SCRIPT_DIRECTORY }}${{ env.REPOSITORY_NAME }} ]
          then
            echo -e -n "\nCreate staging directory started..."
            mkdir -p ${{ env.BASE_SCRIPT_DIRECTORY }}${{ env.REPOSITORY_NAME }};
            echo -e "${{ vars.GreenText}}COMPLETED${{ vars.ResetText }}"
          else
            echo -e -n "\nPurging old artifacts..."
            rm -rf ${{ env.BASE_SCRIPT_DIRECTORY }}${{ env.REPOSITORY_NAME }}/*
            echo -e "${{ vars.GreenText}}COMPLETED${{ vars.ResetText }}"

            echo -e -n "\nPurging old virtual environment..."
            rm -rf ${{ env.BASE_SCRIPT_DIRECTORY }}${{ env.REPOSITORY_NAME }}/.env
            echo -e "${{ vars.GreenText}}COMPLETED${{ vars.ResetText }}"
          fi

          echo -e -n "Copying artifacts..."
          cp -r $GITHUB_WORKSPACE/* ${{ env.BASE_SCRIPT_DIRECTORY }}${{ env.REPOSITORY_NAME }}
          echo -e "${{ vars.GreenText}}COMPLETED${{ vars.ResetText }}"
  build:
    needs: "preflight"
    runs-on: ["self-hosted", "jthodt"]
    steps:
      - uses: "actions/checkout@v3"
      - name: "Set Up Python v3.10.12"
        uses: "actions/setup-python@v4"
        with:
          python-version: "3.10.12"
      - name: "Build Environment"
        id: "build_environment"
        run: |
          cd ${{ env.BASE_SCRIPT_DIRECTORY }}${{ env.REPOSITORY_NAME }}
          echo -e "Current working directory: $(pwd)"

          echo -e "Create Python virtual environment started...\n"
          python3 -m venv .env
          source .env/bin/activate
          python3 -m pip install --upgrade pip
          echo -e "\nCreate Python virtual environment completed."

          echo -e "\nInstall package dependencies started...\n"
          if [ -f requirements-dev.txt ]; then pip install -r requirements-dev.txt --no-cache-dir; fi
          if [ -d ./redist ]; then pip install ./redist/*; fi
          pip3 install -e .
          echo -e "\nInstall package dependencies completed."
      - name: "Build Package"
        id: "build_package"
        run: |
          if [[ ${{ steps.build_environment.outcome }} == "success" ]]
          then
            cd ${{ env.BASE_SCRIPT_DIRECTORY }}${{ env.REPOSITORY_NAME }}
            echo -e "Current working directory: $(pwd)"

            echo -e "Build Python package started...\n"
            source .env/bin/activate
            python3 -m build
            echo -e "\nBuild Python package completed."

            exit 0

          else:
            exit 1
          fi
